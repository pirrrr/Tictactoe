using System;
using System.Collections.Generic;
using System.Linq;
namespace TicTacToe
{
    class Program
    {
        static void Main(string[] args)
        {
            bool play = true;

            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("TicTacToe!");
            Console.ResetColor();

            while (play)
            {
                Console.WriteLine("1. Start a new game");
                Console.WriteLine("2. Quit");
                Console.WriteLine();

                Console.WriteLine("Pick a number and press <enter>");

                var choice = UserInput("[12]");

                switch (choice)
                {
                    case "1":
                        GameLogic();
                        Console.Clear();
                        break;
                    case "2": 
                        play = false;
                        Console.Clear();
                        break;
                        
                }
            }
        }

        private static string UserInput(string validPattern = null)
        {
            var input = Console.ReadLine();
            
            if (validPattern != null)
            {
                Console.WriteLine("\"" + input + "\" is invalid.\n");
            }

            return input;
        }

        private static string GameWinner(string[] board)
        {
            var numRows = (int)Math.Sqrt(board.Length);

            // ROWS
            for (int row = 0; row < numRows; row++)
            {
                if (board[row * numRows] != null)
                {
                    bool hasWon = true;
                    for (int col = 1; col < numRows && hasWon; col++)
                    {
                        if (board[row * numRows + col] != board[row * numRows])
                            hasWon = false;
                    }
                    if (hasWon)
                    {
                        for (int col = 0; col < numRows; col++)
                        {
                            board[row * numRows + col] += "!";
                            return board[row * numRows];
                        }
                    }
                }
            }

            //COLUMNS
            for (int col = 0; col < numRows; col++)
            {
                if (board[col] != null)
                {
                    bool hasWon = true;
                    for (int row = 1; row < numRows && hasWon; row++)
                    {
                        if (board[row * numRows + col] != board[col])
                        {
                            hasWon = false;
                        }
                    }
                    if (hasWon)
                    {
                        for (int row = 0; row < numRows; row++)
                        {
                            board[row * numRows + col] += "!";
                            return board[col];
                        }
                    }
                }
            }

            //DIAGONAL
            if (board[0] != null)
            {
                bool hasWon = true;
                for (int row = 1; row < numRows && hasWon; row++)
                {
                    if (board[row * numRows + row] != board[0])
                    {
                        hasWon = false;
                    }
                }
                if (hasWon)
                {
                    for (int row = 0; row < numRows; row++)
                    {
                        board[row * numRows * row] += "!";
                        return board[0];
                    }
                }
            }

            //ANTI DIAGONAL
            if (board[numRows - 1] != null)
            {
                bool hasWon = true;
                for (int row = 1; row < numRows && hasWon; row++)
                {
                    if (board[row * numRows + (numRows - 1 - row)] != board[numRows - 1])
                    {
                        hasWon = false;
                    }
                }
                if (hasWon)
                {
                    for (int row = 0; row < numRows; row++)
                    {
                        board[row * numRows + (numRows - 1 - row)] += "!";
                        return board[numRows - 1];
                    }
                }
            }
            return null;
        }

        private static bool OutofMoves(IEnumerable<string> board)
        {
            return board.All(space => space != null);
        }


        private static void GameResult(string message, string[] board)
        {
            Console.WriteLine();
            GameGrid(board);

            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine(message);
            Console.ResetColor();

            Console.Write("\nPress any key to continue...");
            Console.CursorVisible = false;
            Console.ReadKey();
            Console.CursorVisible = true;
            
        }

        private static int TakeTurns(string[] board)
        {
            int numRows = (int)Math.Sqrt(board.Length);

            int curRow = 0, curCol = 0;

            for (int i = 0; i < board.Length; i++)
            {
                if (board[i] == null)
                {
                    curRow = i / numRows;
                    curCol = i % numRows;
                    break;
                }
            }

            while (true)
            {
                Console.SetCursorPosition(curCol * 4 + 2, curRow * 4 + 3);
                var keyInfo = Console.ReadKey();
                Console.SetCursorPosition(curCol * 4 + 2, curRow * 4 + 3);
                Console.WriteLine(board[curRow * numRows + curCol] ?? " ");

                switch (keyInfo.Key)
                {
                    case ConsoleKey.LeftArrow:
                        if (curCol > 0)
                        {
                            curCol--;
                        }
                        break;
                    case ConsoleKey.RightArrow:
                        if (curCol + 1 < numRows)
                        {
                            curCol++;
                        }
                        break;
                    case ConsoleKey.UpArrow:
                        if (curRow > 0)
                        {
                            curRow--;
                        }
                        break;
                    case ConsoleKey.DownArrow:
                        if (curRow + 1 < numRows)
                        {
                            curRow++;
                        }
                        break;
                    case ConsoleKey.Spacebar:
                    case ConsoleKey.Enter:
                        if (board[curRow * numRows + curCol] == null)
                        {
                            return curRow * numRows + curCol;
                        }
                        break;
                }
            }
        }



        private static void GameLogic()
        {
            string y = "3"; 
            var boardSize = (int)Math.Pow(int.Parse(y), 2);
            var board = new string[boardSize];

            var turn = "X";

            while (true)
            {
                Console.Clear();

                var winner = GameWinner(board);
                if (winner != null)
                {
                    GameResult(winner[0] + " WINS!", board);
                    break;
                }
                if (OutofMoves(board))
                {
                    GameResult("It's a tie!", board);
                    break;
                }

                Console.WriteLine("Place your " + turn + ":");

                GameGrid(board);

                Console.WriteLine("\nUse the arrow keys and press <enter>");

                var xoLoc = TakeTurns(board);
                board[xoLoc] = turn;

                turn = turn == "X" ? "O" : "X";


            }
        }





























        private static void GameGrid(string[] board)
        {
            var numRows = (int)Math.Sqrt(board.Length);

            Console.WriteLine();

            for (int row = 0; row < numRows; row++)
            {
                if (row != 0)
                    Console.WriteLine(" " + string.Join("|", Enumerable.Repeat("---", numRows)));

                Console.Write(" " + string.Join("|", Enumerable.Repeat("   ", numRows)) + "\n ");

                for (int col = 0; col < numRows; col++)
                {
                    if (col != 0)
                        Console.Write("|");
                    var space = board[row * numRows + col] ?? " ";
                    if (space.Length > 1)
                        Console.ForegroundColor = ConsoleColor.Gray;
                    Console.Write(" " + space[0] + " ");
                    Console.ResetColor();
                }

                Console.WriteLine("\n " + string.Join("|", Enumerable.Repeat("   ", numRows)));
            }

            Console.WriteLine();
        }
    }
}
